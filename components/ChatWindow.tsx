
import React, { useEffect, useRef, useState } from 'react';
import { Bot, User, AlertTriangle, ImageOff, Copy, Check, RefreshCw } from 'lucide-react';
import { Message as MessageType, ThemeColors } from '../types';
import MarkdownRenderer from './MarkdownRenderer';
import PromptSuggestions from './PromptSuggestions';

interface MessageProps {
  message: MessageType;
  darkMode: boolean;
  isLastMessage: boolean;
  onRegenerate: () => void;
}

const Message: React.FC<MessageProps> = ({ message, darkMode, isLastMessage, onRegenerate }) => {
  const [copied, setCopied] = useState(false);

  const handleCopy = () => {
    if (typeof message.content !== 'string') return;
    navigator.clipboard.writeText(message.content).then(() => {
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    }).catch(err => {
      console.error('Failed to copy text: ', err);
    });
  };

  const isErrorMood = message.mood === 'error';
  const isDemoMood = message.mood === 'demo' && !isErrorMood;

  // Adjusted styles for Gemini-like appearance
  const userMessageBg = 'bg-blue-500'; // Slightly lighter blue for user messages
  const oracleMessageBg = 'bg-gray-700'; // Darker gray for oracle messages
  const commonRounded = 'rounded-2xl'; // More rounded corners

  return (
    <div className={`group flex ${message.type === 'user' ? 'justify-end' : 'justify-start'} mb-4`}>
      <div className={`max-w-2xl md:max-w-3xl lg:max-w-4xl ${commonRounded} ${
        message.type === 'user' ? 
        `${userMessageBg} text-white rounded-br-none` : 
        `${oracleMessageBg} text-white rounded-bl-none`
      } p-3 md:p-4 relative`}>
        <div className="flex items-start space-x-3">
          {message.type === 'oracle' && (
            <div className="w-8 h-8 rounded-full flex items-center justify-center shrink-0 text-white bg-gradient-to-br from-purple-500 to-pink-500">
              {isErrorMood ? <AlertTriangle className="w-5 h-5" /> : <Bot className="w-5 h-5" />}
            </div>
          )}
          <div className="flex-1 min-w-0">
            {message.type === 'oracle' && message.model && (
              <div className={`flex items-center space-x-2 text-xs mb-1.5 ${isErrorMood ? 'text-red-300 font-semibold' : (isDemoMood ? 'text-yellow-300' : 'text-gray-400')}`}>
                <span>{message.model}</span>
                {message.image?.success && <span className="text-pink-400">üñºÔ∏è Image</span>}
              </div>
            )}
            <MarkdownRenderer content={message.content} darkMode={darkMode} />
            
            {message.image && (
              <div className="mt-3">
                {message.image.success ? (
                  <img src={message.image.imageUrl} alt="Generated by AI" 
                    className="rounded-lg max-w-xs md:max-w-sm h-auto shadow-lg border border-gray-300 dark:border-gray-600" />
                ) : (
                  <div className={`p-3 rounded-lg border-2 border-dashed ${darkMode ? 'border-gray-600 bg-gray-700/30 text-gray-400' : 'border-gray-300 bg-gray-100/50 text-gray-500'} flex flex-col items-center justify-center max-w-xs md:max-w-sm`}>
                    <ImageOff className="w-10 h-10 mb-2 opacity-70" />
                    <p className="text-sm font-semibold">Image Generation Failed</p>
                    <p className="text-xs text-center">{message.image.model || 'Could not generate image.'}</p>
                  </div>
                )}
                {message.image.success && message.image.model && (
                   <p className="text-xs mt-1 text-gray-400">Generated with {message.image.model}</p>
                )}
              </div>
            )}
             <p className={`text-xs mt-2 text-right ${message.type === 'user' ? 'text-blue-100/80' : 
                (isErrorMood ? 'text-red-300/80' : 
                (isDemoMood ? 'text-yellow-300/80' : 'text-gray-400'))
            }`}>
                {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
             </p>
          </div>
          {message.type === 'user' && (
             <div className="w-8 h-8 rounded-full flex items-center justify-center shrink-0 bg-blue-600 text-white">
                <User className="w-5 h-5" />
             </div>
          )}
        </div>
        {/* Action buttons for Oracle messages */}
        {message.type === 'oracle' && typeof message.content === 'string' && message.content.trim() !== '' && (
          <div className="absolute -bottom-2 left-3 flex items-center gap-1 opacity-0 group-hover:opacity-100 focus-within:opacity-100 transition-opacity duration-200 bg-gray-800 rounded-md p-1">
            {isLastMessage && !isErrorMood && (
              <button
                onClick={onRegenerate}
                title="Regenerate response"
                className="p-1.5 rounded-full hover:bg-gray-600 text-gray-300 hover:text-white"
              >
                <RefreshCw className="w-3.5 h-3.5" />
              </button>
            )}
            <button 
              onClick={handleCopy}
              title={copied ? "Copied!" : "Copy message"}
              className="p-1.5 rounded-full hover:bg-gray-600 text-gray-300 hover:text-white"
            >
              {copied ? <Check className="w-3.5 h-3.5" /> : <Copy className="w-3.5 h-3.5" />}
            </button>
          </div>
        )}
        {/* Action button for User messages */}
        {message.type === 'user' && typeof message.content === 'string' && message.content.trim() !== '' && (
          <div className="absolute -bottom-2 right-3 flex items-center gap-1 opacity-0 group-hover:opacity-100 focus-within:opacity-100 transition-opacity duration-200 bg-gray-800 rounded-md p-1">
            <button 
              onClick={handleCopy}
              title={copied ? "Copied!" : "Copy message"}
              aria-label={copied ? "Message content copied to clipboard" : "Copy message content to clipboard"}
              className="p-1.5 rounded-full hover:bg-gray-600 text-gray-300 hover:text-white"
            >
              {copied ? <Check className="w-3.5 h-3.5" /> : <Copy className="w-3.5 h-3.5" />}
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

interface ChatWindowProps {
  messages: MessageType[];
  isTyping: boolean;
  darkMode: boolean;
  handleSend: (prompt: string) => void;
  handleRegenerate: () => void;
}

const ChatWindow: React.FC<ChatWindowProps> = ({
  messages,
  isTyping,
  darkMode,
  handleSend,
  handleRegenerate,
}) => {
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages, isTyping]);

  const showPromptSuggestions = messages.length === 1 && messages[0].type === 'oracle';

  return (
    <div className="flex-1 flex justify-center overflow-hidden">
      <div className="w-full max-w-4xl px-4 py-6 overflow-y-auto custom-scrollbar">
        {messages.map((message, index) => (
          <Message
            key={index}
            message={message}
            darkMode={darkMode}
            isLastMessage={index === messages.length - 1}
            onRegenerate={handleRegenerate}
          />
        ))}
        {isTyping && (
          <div className="flex justify-start mb-4">
            <div className="bg-gray-700 text-white rounded-xl p-3 md:p-4 rounded-bl-none animate-pulse">
              <div className="flex items-center space-x-2">
                <Bot className="w-5 h-5 text-blue-400" />
                <span className="text-white">Lagos Oracle is thinking...</span>
              </div>
            </div>
          </div>
        )}
        {showPromptSuggestions && (
          <PromptSuggestions onPromptClick={handleSend} />
        )}
        <div ref={messagesEndRef} />
      </div>
    </div>
  );
};

export default ChatWindow;

