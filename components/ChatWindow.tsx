
import React, { useRef, useEffect, useState } from 'react';
import { Bot, User, AlertTriangle, ImageOff, Copy, Check, Video } from 'lucide-react';
import { Message as MessageType, ThemeColors, PersonaInfo } from '../types';
import { marked } from 'marked';
import WelcomeGuide from './WelcomeGuide';

marked.setOptions({
  breaks: true,
  gfm: true,
});

const Avatar: React.FC<{
  persona?: PersonaInfo;
  isUser?: boolean;
  isError?: boolean;
}> = ({ persona, isUser, isError }) => {
  const baseClasses = "w-8 h-8 rounded-full flex items-center justify-center shrink-0 text-white";

  if (isUser) {
    return (
      <div className={`${baseClasses} bg-blue-500`}>
        <User className="w-5 h-5" />
      </div>
    );
  }

  if (isError) {
    return (
        <div className={`${baseClasses} bg-red-500`}>
            <AlertTriangle className="w-5 h-5" />
        </div>
    );
  }

  if (persona?.icon?.startsWith('http')) {
    return <img src={persona.icon} alt={persona.name} className="w-8 h-8 rounded-full object-cover" />;
  }

  const personaColor = persona?.color ? persona.color.replace('text-', 'bg-').replace('-400', '-500') : 'bg-indigo-500';

  return (
    <div className={`${baseClasses} ${personaColor}`}>
      {persona?.icon && !persona.icon.startsWith('http') ? (
        <span className="text-xl">{persona.icon}</span>
      ) : (
        <Bot className="w-5 h-5" />
      )}
    </div>
  );
};

interface MessageProps {
  message: MessageType;
  theme: ThemeColors;
  personas: Record<string, PersonaInfo>;
}

const Message: React.FC<MessageProps> = ({ message, theme, personas }) => {
  const [copied, setCopied] = useState(false);
  const htmlContent = marked.parse(typeof message.content === 'string' ? message.content : '*Error: Invalid message content*');

  const handleCopy = () => {
    if (typeof message.content !== 'string') return;
    navigator.clipboard.writeText(message.content).then(() => {
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    }).catch(err => console.error('Failed to copy text: ', err));
  };

  const isError = message.mood === 'error';
  const currentPersona = message.personaKey ? personas[message.personaKey] : undefined;

  const messageContainerClasses = `group flex items-start gap-3 my-4 relative`;
  const messageBubbleClasses = `relative rounded-xl px-4 py-3 shadow-md max-w-2xl`;

  if (message.type === 'user') {
    return (
      <div className={`${messageContainerClasses} justify-end`}>
        <div className={`${messageBubbleClasses} bg-blue-600 text-white`}>
          <div className="prose prose-sm max-w-none prose-invert prose-p:my-1" dangerouslySetInnerHTML={{ __html: htmlContent }} />
        </div>
        <Avatar isUser />
      </div>
    );
  }

  // Oracle Message
  return (
    <div className={messageContainerClasses}>
      <Avatar persona={currentPersona} isError={isError} />
      <div className="flex flex-col">
        <div className={`${messageBubbleClasses} ${isError ? 'bg-red-100 dark:bg-red-900/40' : theme.card}`}>
            {message.model && (
              <div className={`text-xs mb-1.5 font-semibold ${isError ? 'text-red-600 dark:text-red-300' : theme.muted}`}>
                {message.model}
              </div>
            )}
            <div className={`prose prose-sm max-w-none ${theme.text}`} dangerouslySetInnerHTML={{ __html: htmlContent }} />
            {message.media && (
              <div className="mt-3">
                {message.media.imageUrl && (
                  <img src={message.media.imageUrl} alt="Generated by AI" className="rounded-lg max-w-xs md:max-w-sm h-auto shadow-lg border dark:border-gray-600" />
                )}
                {message.media.videoUrl && (
                  <video src={message.media.videoUrl} controls className="rounded-lg max-w-xs md:max-w-sm h-auto shadow-lg border dark:border-gray-600" />
                )}
                {!message.media.success && (
                  <div className={`p-3 rounded-lg border-2 border-dashed border-gray-300 bg-gray-100/50 text-gray-500 dark:border-gray-600 dark:bg-gray-700/30 dark:text-gray-400 flex flex-col items-center justify-center max-w-xs md:max-w-sm`}>
                    {message.media.videoUrl ? <Video className="w-10 h-10 mb-2 opacity-70" /> : <ImageOff className="w-10 h-10 mb-2 opacity-70" />}
                    <p className="text-sm font-semibold">Media Generation Failed</p>
                    <p className="text-xs text-center">{message.media.model || 'Could not generate media.'}</p>
                  </div>
                )}
              </div>
            )}
        </div>
        <div className="flex items-center justify-start mt-1.5 space-x-3">
            <span className={`text-xs ${theme.muted}`}>
                {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
            </span>
            {typeof message.content === 'string' && message.content.trim() !== '' && (
              <button
                onClick={handleCopy}
                title={copied ? "Copied!" : "Copy message"}
                className={`p-1 rounded-full transition-all duration-200 text-gray-500 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-100 hover:bg-gray-200 dark:hover:bg-gray-700 opacity-0 group-hover:opacity-100`}
              >
                {copied ? <Check className="w-3.5 h-3.5" /> : <Copy className="w-3.5 h-3.5" />}
              </button>
            )}
        </div>
      </div>
    </div>
  );
};

interface ChatWindowProps {
  messages: MessageType[];
  isTyping: boolean;
  theme: ThemeColors;
  personas: Record<string, PersonaInfo>;
  onPromptClick: (prompt: string) => void;
}

const ChatWindow: React.FC<ChatWindowProps> = ({ messages, isTyping, theme, personas, onPromptClick }) => {
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages, isTyping]);

  return (
    <div className="flex-1 overflow-y-auto">
      <div className="max-w-3xl mx-auto p-4">
        {messages.length === 0 && !isTyping ? (
          <WelcomeGuide theme={theme} onPromptClick={onPromptClick} />
        ) : (
          messages.map((message) => (
            <Message key={message.id} message={message} theme={theme} personas={personas} />
          ))
        )}
        {isTyping && (
          <div className="flex items-start gap-3 my-4">
             <Avatar persona={{ name: 'Oracle', icon: 'ðŸ¤–', description: '', systemPromptModifier: '', color: 'bg-indigo-500' }} />
             <div className={`rounded-xl px-4 py-3 shadow-md ${theme.card}`}>
                <div className="flex items-center space-x-1">
                    <div className="w-2 h-2 bg-gray-500 rounded-full animate-pulse" style={{ animationDelay: '0s' }}></div>
                    <div className="w-2 h-2 bg-gray-500 rounded-full animate-pulse" style={{ animationDelay: '0.2s' }}></div>
                    <div className="w-2 h-2 bg-gray-500 rounded-full animate-pulse" style={{ animationDelay: '0.4s' }}></div>
                </div>
             </div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>
    </div>
  );
};

export default ChatWindow;
