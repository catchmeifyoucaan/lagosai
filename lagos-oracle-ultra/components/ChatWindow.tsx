
import React, { useRef, useEffect, useState } from 'react';
import { Bot, User, AlertTriangle, ImageOff, Copy, Check } from 'lucide-react';
import { Message as MessageType, ThemeColors } from '../types';
import { marked } from 'marked'; 

marked.setOptions({
  breaks: true, 
  gfm: true,    
});

interface MessageProps {
  message: MessageType;
  theme: ThemeColors;
  darkMode: boolean;
}

const Message: React.FC<MessageProps> = ({ message, theme, darkMode }) => {
  const [copied, setCopied] = useState(false);
  // Ensure message.content is always a string before parsing
  const htmlContent = marked.parse(typeof message.content === 'string' ? message.content : '*Error: Invalid message content*');

  const handleCopy = () => {
    if (typeof message.content !== 'string') return; // Don't copy if content isn't string
    navigator.clipboard.writeText(message.content).then(() => {
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    }).catch(err => {
      console.error('Failed to copy text: ', err);
    });
  };

  const isErrorMood = message.mood === 'error';
  const isDemoMood = message.mood === 'demo' && !isErrorMood; // Demo shouldn't override error

  const oracleCardBaseStyle = `${theme.card} border ${darkMode ? 'border-purple-500/30' : 'border-purple-200/50'}`;
  const oracleCardErrorStyle = `bg-red-500/10 border-red-500/40 dark:bg-red-700/20 dark:border-red-600/50`;
  const oracleCardDemoStyle = `bg-yellow-400/10 border-yellow-500/40 dark:bg-yellow-600/20 dark:border-yellow-500/50`;

  let oracleCardStyle = oracleCardBaseStyle;
  if (isErrorMood) {
    oracleCardStyle = oracleCardErrorStyle;
  } else if (isDemoMood) {
    oracleCardStyle = oracleCardDemoStyle;
  }


  return (
    <div className={`group flex ${message.type === 'user' ? 'justify-end' : 'justify-start'} relative mb-1`}>
      <div className={`max-w-2xl md:max-w-3xl lg:max-w-4xl shadow-md ${
        message.type === 'user' ? 
        'bg-cyan-500 dark:bg-cyan-600 text-white rounded-t-xl rounded-bl-xl' : 
        `${oracleCardStyle} rounded-t-xl rounded-br-xl`
      } p-3 md:p-4`}>
        <div className="flex items-start space-x-3">
          {message.type === 'oracle' && (
            <div className={`w-8 h-8 rounded-full flex items-center justify-center shrink-0 text-white ${
              isErrorMood ? 'bg-red-500' : (isDemoMood ? 'bg-yellow-500' : 'bg-gradient-to-br from-purple-500 to-pink-500')
            }`}>
              {isErrorMood ? <AlertTriangle className="w-5 h-5" /> : <Bot className="w-5 h-5" />}
            </div>
          )}
          <div className="flex-1 min-w-0">
            {message.type === 'oracle' && message.model && (
              <div className={`flex items-center space-x-2 text-xs mb-1.5 ${
                isErrorMood ? (darkMode ? 'text-red-300 font-semibold' : 'text-red-700 font-semibold') : 
                (isDemoMood ? (darkMode ? 'text-yellow-300' : 'text-yellow-700') : theme.muted)
              }`}>
                <span>{message.model}</span>
                {message.image?.success && <span className="text-pink-400">üñºÔ∏è Image</span>}
              </div>
            )}
            <div className={`prose prose-sm max-w-none prose-p:my-1 prose-strong:font-semibold 
                            ${theme.text} 
                            ${message.type === 'user' ? 'prose-invert' : ''}
                            ${isErrorMood ? (darkMode ? 'prose-p:text-red-200 prose-strong:text-red-100' : 'prose-p:text-red-800 prose-strong:text-red-900') : ''}
                          `}
                 dangerouslySetInnerHTML={{ __html: htmlContent }} />
            
            {message.image && (
              <div className="mt-3">
                {message.image.success ? (
                  <img src={message.image.imageUrl} alt="Generated by AI" 
                    className="rounded-lg max-w-xs md:max-w-sm h-auto shadow-lg border border-gray-300 dark:border-gray-600" />
                ) : (
                  <div className={`p-3 rounded-lg border-2 border-dashed ${darkMode ? 'border-gray-600 bg-gray-700/30 text-gray-400' : 'border-gray-300 bg-gray-100/50 text-gray-500'} flex flex-col items-center justify-center max-w-xs md:max-w-sm`}>
                    <ImageOff className="w-10 h-10 mb-2 opacity-70" />
                    <p className="text-sm font-semibold">Image Generation Failed</p>
                    <p className="text-xs text-center">{message.image.model || 'Could not generate image.'}</p>
                  </div>
                )}
                {message.image.success && message.image.model && (
                   <p className={`text-xs mt-1 ${theme.muted}`}>Generated with {message.image.model}</p>
                )}
              </div>
            )}
             <p className={`text-xs mt-2 text-right ${message.type === 'user' ? 'text-cyan-100/80' : 
                (isErrorMood ? (darkMode ? 'text-red-300/80' : 'text-red-600/80') : 
                (isDemoMood ? (darkMode ? 'text-yellow-300/80' : 'text-yellow-600/80') : theme.muted))
            }`}>
                {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
             </p>
          </div>
          {message.type === 'user' && (
             <div className={`w-8 h-8 rounded-full flex items-center justify-center shrink-0 bg-cyan-500 text-white`}>
                <User className="w-5 h-5" />
             </div>
          )}
        </div>
      </div>
      {typeof message.content === 'string' && message.content.trim() !== '' && ( // Only show copy button if there's content
        <button 
          onClick={handleCopy}
          title={copied ? "Copied!" : "Copy message"}
          aria-label={copied ? "Message content copied to clipboard" : "Copy message content to clipboard"}
          className={`absolute top-1 p-1.5 rounded-full transition-all duration-200 opacity-0 group-hover:opacity-100 focus:opacity-100
                      ${message.type === 'user' ? 
                        'right-11 bg-cyan-600/80 hover:bg-cyan-500 text-white dark:bg-cyan-700/80 dark:hover:bg-cyan-600' : 
                        `left-11 ${isErrorMood || isDemoMood ? (darkMode? 'bg-slate-600/70 hover:bg-slate-500' : 'bg-slate-300/70 hover:bg-slate-400') : (darkMode ? 'bg-slate-600/70 hover:bg-slate-500' : 'bg-slate-300/70 hover:bg-slate-400')} text-slate-100 dark:text-slate-200`}
                    `}
        >
          {copied ? <Check className="w-3.5 h-3.5" /> : <Copy className="w-3.5 h-3.5" />}
        </button>
      )}
    </div>
  );
};

interface ChatWindowProps {
  messages: MessageType[];
  isTyping: boolean;
  theme: ThemeColors;
  darkMode: boolean;
}

const ChatWindow: React.FC<ChatWindowProps> = ({ messages, isTyping, theme, darkMode }) => {
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages, isTyping]);

  return (
    <div className="flex-1 overflow-y-auto p-3 md:p-4">
      <div className="max-w-6xl mx-auto">
        {messages.map((message) => (
          <Message key={message.id} message={message} theme={theme} darkMode={darkMode} />
        ))}
        {isTyping && (
          <div className="flex justify-start mb-1">
            <div className={`${theme.card} border ${darkMode ? 'border-purple-500/30' : 'border-purple-200/50'} rounded-xl p-3 md:p-4 shadow-md animate-pulse`}>
              <div className="flex items-center space-x-2">
                <Bot className={`w-5 h-5 ${theme.secondaryAccent}`} />
                <span className={theme.text}>Lagos Oracle is thinking...</span>
              </div>
            </div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>
    </div>
  );
};

export default ChatWindow;
